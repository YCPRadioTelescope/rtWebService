{
  "swagger": "2.0",
  "info": {
    "description": "This is a webService for the YCP Radio Telescope" ,
    "version": "1.0.0",
    "title": "Swagger YCP Radio Telescoepe",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "enardo@ycp.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "email",
      "description": "Access to AWS SES"
    },
    {
      "name": "sensor",
      "description": "Manage sensors"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Gets all users",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/get"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/pendingUsers": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Gets users that are 'INACTIVE'",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "uuid for security",
            "required": true,
            "schema": {
              "$ref": "#/definitions/get"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/approveUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Takes a user that is 'INACTIVE' and makes them 'ACTIVE'",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/approveDeny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/denyUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Takes a user that is 'INACTIVE' and makes them 'BANNED'",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/approveDeny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/createInactiveUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates an 'INACTIVE' user for testing purposes",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userII"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/deleteUser": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user for testing only",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/approveDeny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/email": {
      "post": {
        "tags": [
          "email"
        ],
        "summary": "sends an email to a specified user",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setOverride": {
      "post": {
        "tags": [
          "sensor"
        ],
        "summary": "set the sensor's details ",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "integer to assign to all sensor details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setOverride"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Request does not contain proper fields. name or details parameters are missing"
          },
          "403": {
            "description": "Wrong Credentials. "
          }
        }
      }
    },
    "/setStatus": {
      "post": {
        "tags": [
          "sensor"
        ],
        "summary": "set the sensor's details ",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "integer to assign to all sensor details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Request does not contain proper fields"
          },
          "403": {
            "description": "Wrong Credentials. "
          }
        }
      }
    },
    "/setValue": {
      "post": {
        "tags": [
          "sensor"
        ],
        "summary": "set the sensor's value ",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "integer to assign to all sensor details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Request does not contain proper fields"
          },
          "403": {
            "description": "Wrong Credentials."
          }
        }
      }
    },
    "/setAllStatus": {
      "post": {
        "tags": [
          "sensor"
        ],
        "summary": "sets all sensor's details (sensor color) to details field",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "integer to assign to all sensor details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setAllStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "gets all appointments",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/get"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          }
        }
      }
    },
    "/recentAppointments": {
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "returns the past 10 appointments",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/get"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          }
        }
      }
    },
    "/futureAppointments": {
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "returns the next 10 appointments",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/get"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/appointment"
            }
          },
          "401": {
            "description": "Request does not contain required fields"
          },
          "403": {
            "description": "Wrong Credentials"
          }
        }
      }
    },
    "/createAppointment": {
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "creates a test appointment",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "start time and end time should be in this format -> 2019-11-20 19:52:00",
            "required": true,
            "schema": {
              "$ref": "#/definitions/appointmentCreation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/deleteAppointment": {
      "post": {
        "tags": [
          "appointment"
        ],
        "summary": "deletes a test appointment",
        "description": "",
        "operationId": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/approveDeny"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email_address": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "active": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Email"
      }
    },
    "setStatus": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "details": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "setStatus"
      }
    },
    "setAllStatus": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "details": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "setStatus"
      }
    },
    "setValue": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "setStatus"
      }
    },
    "setOverride": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "override": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "setStatus"
      }
    },
    "userII": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email_address": {
          "type": "string"
        }
      }
    },
    "email": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "subject ": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Email"
      }
    },
    "get": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        }
      }
    },
    "approveDeny": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        }
      }
    },
    "appointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "telescope_id": {
          "type": "string"
        },
        "public": {
          "type": "string"
        },
        "orientation_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "celestial_body_id": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        }
      }
    },
    "appointmentCreation": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "start_time": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
